name: Python CI/CD Pipeline

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Verify installation
      run: |
        python -c "import sqlalchemy; print(f'SQLAlchemy: {sqlalchemy.__version__}')"
        python -c "import yaml; print('PyYAML: OK')"
        python -c "import ttkbootstrap; print('ttkbootstrap: OK')"
        python -c "import pytest; print(f'pytest: {pytest.__version__}')"
    
    - name: Code formatting check with black
      run: |
        black --check --diff ofm/
    
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff ofm/
    
    - name: Lint with flake8
      run: |
        # Check for syntax errors and undefined names
        flake8 ofm/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Full linting with our configuration
        flake8 ofm/ --config .flake8 --count --statistics
    
    - name: Type checking (if mypy config exists)
      run: |
        if [ -f "mypy.ini" ] || [ -f ".mypy.ini" ] || [ -f "pyproject.toml" ]; then
          pip install mypy
          mypy ofm/ || echo "Type checking failed, but continuing..."
        else
          echo "No mypy configuration found, skipping type checking"
        fi
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        # Run tests with coverage
        pytest ofm/tests/ -v --cov=ofm --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Security check with safety
      run: |
        safety check --json || echo "Safety check completed with warnings"
      continue-on-error: true
    
    - name: Security analysis with bandit
      run: |
        bandit -r ofm/ -f json -o bandit-report.json || echo "Bandit scan completed"
      continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*