name: Python CI/CD Pipeline

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

permissions:
  contents: read

jobs:
  # Fast tests that run on every push/PR
  fast-tests:
    runs-on: ubuntu-latest
    name: Fast Tests & Linting
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pre-commit
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pre-commit pytest-xdist
    
    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure
    
    - name: Run fast tests
      run: |
        pytest -m fast -v --tb=short

  # Comprehensive tests with matrix
  test:
    runs-on: ${{ matrix.os }}
    needs: [fast-tests]
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest-xdist pytest-timeout
    
    - name: Verify installation
      run: |
        python -c "import sqlalchemy; print(f'SQLAlchemy: {sqlalchemy.__version__}')"
        python -c "import yaml; print('PyYAML: OK')"
        python -c "import ttkbootstrap; print('ttkbootstrap: OK')"
        python -c "import pytest; print(f'pytest: {pytest.__version__}')"
    
    - name: Code formatting check with black
      run: |
        black --check --diff ofm/ --line-length=100
    
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff ofm/ --profile black --line-length=100
    
    - name: Lint with flake8
      run: |
        # Check for syntax errors and undefined names
        flake8 ofm/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Full linting with our configuration
        flake8 ofm/ --config .flake8 --count --statistics
    
    - name: Type checking with mypy
      run: |
        pip install mypy types-PyYAML types-requests
        mypy ofm/ --config-file mypy.ini
      continue-on-error: true
    
    - name: Run unit tests
      run: |
        pytest -m unit -v --tb=short --timeout=60
    
    - name: Run integration tests
      run: |
        pytest -m integration -v --tb=short --timeout=300
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
    
    - name: Run all tests with coverage
      run: |
        # Run tests with coverage using parallel execution
        pytest -v --cov=ofm --cov-report=xml --cov-report=term-missing --cov-report=html -n auto
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        verbose: true
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      with:
        name: coverage-report
        path: htmlcov/

  # Security and quality checks
  security:
    runs-on: ubuntu-latest
    needs: [fast-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install safety bandit[toml] semgrep
    
    - name: Security check with safety
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed with warnings"
      continue-on-error: true
    
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json
    
    - name: Security analysis with bandit
      run: |
        bandit -r ofm/ -f json -o bandit-report.json -ll -i
      continue-on-error: true
    
    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
    
    - name: Run Semgrep
      run: |
        semgrep --config=auto --json --output=semgrep-report.json ofm/ || echo "Semgrep completed"
      continue-on-error: true
    
    - name: Upload semgrep report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: semgrep-report
        path: semgrep-report.json

  # Performance benchmarks
  performance:
    runs-on: ubuntu-latest
    needs: [fast-tests]
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest -m performance -v --benchmark-only --benchmark-autosave
      continue-on-error: true
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: .benchmarks/

  # Build and package validation
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/